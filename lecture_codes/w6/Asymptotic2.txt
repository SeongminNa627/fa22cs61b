Asymptotic 2


Challenging Example

public static void printParty(int N){
	for (int i = 1; i <= N; i = i * 2){ 
		for (int j = 0; j < i; j ++){
			System.out.println("Hello");
			int Zug = 1 + 1;
		}
	}
}

	i  = 1     i = 2         i = 4         i = 8
	j  = 1     j = 0 to 2    j = 0 to 4    j = 0 to 8
--> NlogN? No!

Right Aprroach: Draw out the i x j grid! 
Cost Model: println("Hello");
--> C(N) =1 + 2 + 4 + ... + N, when N = 2N
--> C(N) = 2N - 1


*** There is no magic shortcut for these ***
Two things to remeber: 
1 + 2 + 3 + ... + Q = Q(Q + 1)/2  = O(Q^2)
1 + 2 + 4 + ... + Q (where Q is power of 2) = 2Q - 1 = O(Q)

Some strategies:
1.Find exact sum
2.Write out examples
3.Draw pictures



Runtime Of Recursion


public static int f3(int n ){
	if(n <= 1)
		return 1;
	return f3(n-1) + f3(n-1);
}

Every time we increase n by 1 it will be double the calls.

Cost Model = function call
C(1) = 1
C(2) = 1 + 2
C(3) = 1 + 2 + 4
C(N) = 1 + 2 + ... + 2^(n-1)
	 = 2Q - 1
C(N) = 2 * 2^(n-1) -1 --> Big - Theta of 2^N -> Better!

C(1) = 1
C(N) = 2 * C(N - 1) --> Ultimate Approach but above is better




Binary Search

Search for 33


6 13 14 25 33 43 51 53 64 72 84 93 95 96 97
^                    ^                    ^
|                    |                    |
lo                  mid                   hi


Given the input size of N, how many comparison will happen at the worst?
log2(N)! 
1 = N/2^c -> C = log_2(N)


More rigorous proving:

static int binarySearch(String[] sorts, String x, int lo, int hi)
	if (lo > hi) return -1;
	int m = (lo + hi)/2; 
	int cmp = x.compareTo(sorted[m]);
	if (cmp < 0 ) return binarySearch(sorted, x, lo, m-1);
	else if (cmp > 0) return binarySearch(sorted, x, m + 1, hi);
	else return m;


C = call of BinarySearch
ex) N = 6 
C(6) = 3

N = 1
C = 1

N = 2
C = 2

N = 3
C = 2

N = 4
C = 3
 
... pedantic but, C(N) = floor(log_2(N)) + 1

floor(f(N)) = big_theta(f(n))
ceil(f(N)) = big_theta(f(n))
logp(N) = big_theta(logq(N))



finally, ultimately recurrence relation, but even more pedantic.

Last algorithm practice - mergesort

1. Selection Sort: takes the smallest and moves it to the front --> N^2
	- Arbitrary Unit of Time 
		- if SS(N = 6) takes about ~36 AU
		- SS(N = 64) takes ~2048 AU
	- Merge?: Combining two arrays into one.
2. MergeSort
    - A = {2, 3, 6, 10, 11}, B = {4, 5, 7, 8}
    - Total = {2, 3, 4, 5, 6, 7, 8, 10, 11}
    How does the runtime of merge grow with N, the total number of items?
    -> Theta(N)



    Let us say 
    SS(N = 64) --> 2048 AU

              M(N = 64) --> 64 AU
             /				\
    SS(N = 32) --> 512     SS(N = 32) --> 512 

    half the array and SS on them and then merge --> 1088 < 2048

    Why once? Keep halving! SS on them and Merge! 
    -> At the end, we do not need to even SS!
    The height of this merge tree will be log(64).

    What would be the order of growth? Nlog(N)! -> Every layer takes N amount of performance.



No MAGIC SHORTCUT!!!







